
#comments-container

	section#comments-list

		.comment-reply-container

			.comment-reply-avatar
				// XXX Use actual avatar
				img(src="{{ current_user.gravatar }}")

			.comment-reply-form

				.comment-reply-field
					textarea(
						id="comment_field",
						data-parent_id="{{ parent_id }}",
						placeholder="Join the conversation...",)

					.comment-reply-meta
						.comment-details
							.comment-rules
								a(href="https://guides.github.com/features/mastering-markdown/") markdown ready

							.comment-author
								| commenting as
								span.author-name {{ current_user.username }}

						button.comment-action-cancel.btn.btn-outline(type="button")
							i.fa.fa-times
						button.comment-action-submit.btn.btn-outline(type="button")
							| Post Comment

					.comment-reply-preview


		section#comments-list-header

			#comments-list-items

			script#comment-template(type="text/x-handlebars-template")
				| {% raw %}

				| {{#list items }}
				.comment-container(
					data-node_id="{{ _id }}",
					class="{{#if is_team}}is-team{{/if}}{{#if is_reply}}is-reply{{else}}is-first{{/if}}")

					.comment-header
						.comment-avatar
							img(src="{{ gravatar }}")

						.comment-author
							| {{ author }}

						| {{#if is_team}}
						.comment-badge.badge-team team
						| {{/if}}

						.comment-time {{ time_published }}

					.comment-content {{{ content }}}

					.comment-meta
						.comment-rating(
							class="{{#if is_rated}}rated{{/if}}{{#if is_rated_positive}} positive{{/if}}")
							.comment-rating-value {{ rating_up }}

							.comment-rating-action.up(title="Upvote comment")
							.comment-rating-action.down(title="Downvote comment")

						.comment-action-reply reply

				| {{/list}}
				| {% endraw %}


			// TODO
				script#comments-list-template(type="text/x-handlebars-template")
					| {% raw %}

					| {{#list items }}
					| {{/list}}

					| {% endraw %}




| {% block comment_scripts %}
script(type="text/javascript", src="{{ url_for('static', filename='assets/js/markdown.min.js') }}")
script(type="text/javascript", src="//cdn.rawgit.com/showdownjs/showdown/1.2.3/dist/showdown.min.js")


script.
	// Markdown initialization
	var convert = new Markdown.getSanitizingConverter().makeHtml;

	// Define the template for handlebars
	var source = $("#comment-template").html();
	var template = Handlebars.compile(source);


	// Register the helper for generating the comments list
	Handlebars.registerHelper('list', function(context, options) {
		var ret = "";

		// Loop through all first-level comments
		for(var i=0, j=context.length; i<j; i++) {

			/* Convert Markdown for each comment */
			context[i]['content'] = convert(context[i]['content']);

			// Append compiled comment to return string
			ret = ret + options.fn(context[i]);

			// Search for replies to the current comment
			if (context[i]['replies']) {

				var replies = context[i]['replies'];
				var compiled_replies = "";

				// Loop through replies
				for(var r=0, t=replies.length; r<t; r++) {

					// Append compiled replies
					compiled_replies = compiled_replies + options.fn(replies[r]);

				}

				// Append replies list to the return string
				ret = ret + compiled_replies;

			}
		}

		return ret;
	});

	// Helper for the if/else statement
	Handlebars.registerHelper('if', function(conditional, options) {
		if(conditional) {
			return options.fn(this);
		} else {
			return options.inverse(this);
		}
	});


	// Get the comments list in JSON
	$.getJSON( "{{url_for('nodes.comments_index')}}?parent_id={{ parent_id }}&format=json", function( data ) {

		// Format using handlebars template
		var comments = template(data);
		$('#comments-list-items').html(comments);
	});



	$(function() {
		var $textarea = $('.comment-reply-field textarea'),
				$container = $('.comment-reply-form'),
				$preview = $('.comment-reply-preview');

		$textarea.keyup(function() {
			$preview.html(convert($textarea.val()));

			if ($textarea.val()) {
				$container.addClass('filled');
			} else {
				$container.removeClass('filled');
			};

		}).trigger('keyup');
	});


	/* Reply */
	$('body').on('click', '.comment-action-reply', function(){

		// container of the comment we are replying to
		parentDiv = $(this).closest('.comment-container');

		// container of the first-level comment in the thread
		parentDivFirst = $(this).parent().parent().siblings('.is-first');

		// Get the id of the comment
		if (parentDiv.hasClass('is-reply')) {
			parentNodeId = parentDivFirst.data('node_id');
		} else {
			parentNodeId = parentDiv.data('node_id');
		}

		// Get the textarea and set its parent_id data
		var commentField = document.getElementById('comment_field');
		commentField.setAttribute('data-parent_id', parentNodeId);

		// Add class for styling
		parentDiv.addClass('is-replying');

		// Move comment-reply container field after the parent container
		commentForm = $('.comment-reply-container').detach();
		parentDiv.after(commentForm);
	});


	/* Cancel Reply */
	$('.comment-action-cancel').click(function(){
		$('.comment-reply-container').detach().prependTo('#comments-list');
	});


	/* Submit */
	$('.comment-action-submit').click(function(e){

		$this = $(this);
		$this.html('<i class="fa fa-spin fa-spinner"></i> Posting...');

		var $textarea = $('.comment-reply-field textarea');

		// Check if there's actual content in the textarea
		if ($textarea.val()) {

			// Collect parent_id
			var commentField = document.getElementById('comment_field');
			parent_id = commentField.getAttribute('data-parent_id');

			$.post("{{url_for('nodes.comments_create')}}",

				// Submit content and parent_id for comment creation
				{'content': $('#comment_field').val(), 'parent_id': parent_id}
			)
			.done(function(){
				// Load the comments
				var url = "{{url_for('nodes.comments_index')}}?parent_id={{ parent_id }}";
				$.get(url, function(dataHtml) {
					// Update the DOM injecting the generate HTML into the page
					$('#comments-container').replaceWith(dataHtml);
				})
			});

		} else {
			// No content in the textarea
			$this.html('<i class="fa fa-spin fa-circle-o-notch"></i> Write something...');
			$this.addClass('button-field-error');
			$textarea.addClass('field-error')

			setTimeout(function(){
				$this.html('Post Comment');
				$this.removeClass('button-field-error');
				$textarea.removeClass('field-error');
			}, 3000);

		};
	});


	/* Rate */
	$('body').on('click', '.comment-rating-action', function(){
		var nodeId = $(this).parent().parent().parent().data('node_id');
		var url = "/nodes/comments/" + nodeId + "/rate";
		var is_positive = true;
		if ($(this).hasClass('down')) {is_positive = false};
		$.post(url, {'is_positive': is_positive});
	});



| {% endblock %}
