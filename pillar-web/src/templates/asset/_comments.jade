
#comments-container

	section#comments-list

		.comment-reply-container

			.comment-reply-avatar
				// XXX Use actual avatar
				img(src="{{ current_user.gravatar }}")

			.comment-reply-form

				.comment-reply-field
					textarea(
						id="comment_field",
						data-parent_id="{{ parent_id }}",
						placeholder="Join the conversation...",)
					.comment-reply-preview

				.comment-reply-meta
					.comment-details
						.comment-rules
							a(href="https://guides.github.com/features/mastering-markdown/") markdown supported

						.comment-author
							| commenting as
							span.author-name {{ current_user.username }}

					button.comment-action-cancel.btn.btn-outline(type="button")
						i.fa.fa-times
					button.comment-action-submit.btn.btn-outline(type="button")
						| Post Comment

		section#comments-list-header

			| {% if comments %}

			h3 Comments
				span ({{ comments|length }})

			| {% for comment in comments %}

			.comment-container(
				data-node_id="{{ comment['_id'] }}",
				class="{% if comment['is_team'] %}is-team{% endif %}{% if comment['is_reply'] %}is-reply{% endif %}")

				.comment-header
					.comment-avatar
						img(src="{{ comment['gravatar'] }}")

					.comment-author
						| {{comment['author']}}

					| {% if comment['is_team'] %}
					.comment-badge.badge-team team
					| {% endif %}

					.comment-time {{comment['time_published']}}

				.comment-content {{comment['content']}}

				.comment-meta
					.comment-rating
						.comment-rating-value {{comment['rating_up']}}

						.comment-rating-up
						.comment-rating-down

					.comment-action-reply reply

			| {% endfor %}

			| {% endif %}

| {% block comment_scripts %}
script(type="text/javascript", src="{{ url_for('static', filename='assets/js/markdown.min.js') }}")
script(type="text/javascript", src="//cdn.rawgit.com/showdownjs/showdown/1.2.3/dist/showdown.min.js")

script.
	var convert = new Markdown.getSanitizingConverter().makeHtml;

	$(function() {
		var $textarea = $('.comment-reply-field textarea'),
				$container = $('.comment-reply-form'),
				$preview = $('.comment-reply-preview');

		$textarea.keyup(function() {
			$preview.html(convert($textarea.val()));

			if ($textarea.val()) {
				$container.addClass('filled');
			} else {
				$container.removeClass('filled');
			};

		}).trigger('keyup');
	});

	/* Convert Markdown for each comment */
	$('.comment-content').each(function(i){
		$(this).html(convert($(this).text()));
	});


	/* Reply */
	$('.comment-action-reply').click(function(){

		parentDiv = $(this).closest('.comment-container');

		// Get the id of the comment
		parentNodeId = parentDiv.data('node_id');


		// Set it as parent_id of the textarea field
		var commentField = document.getElementById('comment_field');
		commentField.setAttribute('data-parent_id', parentNodeId);

		parentDiv.addClass('is-replying');


		commentForm = $('.comment-reply-container').detach();
		parentDiv.after(commentForm);
	});


	/* Cancel Reply */
	$('.comment-action-cancel').click(function(){
		$('.comment-reply-container').detach().prependTo('#comments-list');
	});


	/* Submit */
	$('.comment-action-submit').click(function(e){

		$this = $(this);
		$this.html('<i class="fa fa-spin fa-spinner"></i> Posting...');

		var $textarea = $('.comment-reply-field textarea');

		// If there's content in the field
		if ($textarea.val()) {

			// Collect parent_id
			var commentField = document.getElementById('comment_field');
			parent_id = commentField.getAttribute('data-parent_id');
			//- parent_id = $('#comment_field').data('parent_id');

			$.post("{{url_for('nodes.comments_create')}}",

				// Submit content and parent_id for comment creation
				{'content': $('#comment_field').val(), 'parent_id': parent_id},
				function(data){

					// Append the new comment to the thread
					console.log(data);

			})
			.done(function(){

				// Load the comments
				var url = "{{url_for('nodes.comments_index')}}?parent_id={{ parent_id }}";

				$.get(url, function(dataHtml) {
					// Update the DOM injecting the generate HTML into the page
					$('#comments-container').replaceWith(dataHtml);
				})
			});

		} else {

			$this.html('<i class="fa fa-spin fa-circle-o-notch"></i> Write something...');
			$this.addClass('button-field-error');

			setTimeout(function(){
				$this.html('Post Comment');
				$this.removeClass('button-field-error');
			}, 3000);

		};

	});

| {% endblock %}
