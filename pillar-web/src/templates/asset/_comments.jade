
#comments-container

	section#comments-list

		.comment-reply-container

			.comment-reply-avatar
				// XXX Use actual avatar
				img(src="http://placehold.it/40x40")

			.comment-reply-form
				.comment-reply-field
					textarea(placeholder="Join the conversation...")#comment_field
					.comment-reply-preview

				.comment-reply-meta
					.comment-details
						.comment-rules
							a(href="https://guides.github.com/features/mastering-markdown/") markdown supported

						.comment-author
							| commenting as
							span.author-name Dude name

					button.comment-submit.btn.btn-outline(type="button") Post Comment


		section#comments-header

			h3 Comments
				// XXX use actual comments count
				span (14)


		| {# Each individual comment #}
		| {% for c in range(0, 5) %}

		// placeholder numbers for style
		| {% set mod = (loop.index == 2) %}
		| {% set reply = (loop.index > 3) %}

		.comment-container(class="{% if mod %}is-team{% endif %} {% if reply %}is-reply{% endif %}")

			.comment-header
				.comment-avatar
					// XXX Use actual avatar
					img(src="http://placehold.it/40x40")

				.comment-author
					| Author Number {{loop.index}}

				| {% if mod %}
				.comment-badge.badge-team team
				| {% endif %}

				.comment-time {{ 13 * loop.index }} mins ago

			.comment-content # AWSOM

			.comment-meta
				.comment-rating
					.comment-rating-value {{ 3 * loop.index }}

					.comment-rating-up
					.comment-rating-down

				.comment-reply reply

		| {% endfor %}

| {% block comment_scripts %}
script(type="text/javascript", src="{{ url_for('static', filename='assets/js/markdown.min.js') }}")
script(type="text/javascript", src="//cdn.rawgit.com/showdownjs/showdown/1.2.3/dist/showdown.min.js")

script.
	var convert = new Markdown.getSanitizingConverter().makeHtml;

	$(function() {
		var $textarea = $('.comment-reply-field textarea'),
				$container = $('.comment-reply-form'),
				$preview = $('.comment-reply-preview');

		$textarea.keyup(function() {
			$preview.html(convert($textarea.val()));

			if ($textarea.val()) {
				$container.addClass('filled');
			} else {
				$container.removeClass('filled');
			};

		}).trigger('keyup');
	});

	/* Convert markdown for each comment */
	$('.comment-content').each(function(i){
		$(this).html(convert($(this).text()));
	});

	$('.comment-submit').click(function(e){
		console.log('form');
		$.post("{{url_for('nodes.comments_create')}}",
			{'content': $('#comment_field').val()},
			function(data){
				console.log(data);
		});
	});

| {% endblock %}
